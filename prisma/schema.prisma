generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                        @id @default(cuid())
  email                   String                        @unique
  emailVerified           DateTime?
  name                    String?
  password                String?
  image                   String?
  phone                   String?
  role                    UserRole                      @default(CUSTOMER)
  status                  UserStatus                    @default(PENDING)
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  accounts                Account[]
  activities              Activity[]
  company                 Company?
  cookieConsents          CookieConsent[]               @relation("UserCookieConsent")
  customer                Customer?
  designs                 Design[]
  farmer                  Farmer?
  kvkkApplications        KVKKApplication[]             @relation("KVKKApplicationProcessor")
  kvkkAuditLogs           KVKKAuditLog[]                @relation("UserKVKKAudit")
  manualExchangeRates     ManualExchangeRate[]
  notifications           Notification[]
  packagesCreated         Package[]                     @relation("PackageCreatedBy")
  packagesUpdated         Package[]                     @relation("PackageUpdatedBy")
  photoRequestsCreated    PhotoRequest[]                @relation("PhotoRequestCreator")
  photoRequestsReviewed   PhotoRequest[]                @relation("PhotoRequestReviewer")
  productsCreated         Product[]                     @relation("ProductCreatedBy")
  productsUpdated         Product[]                     @relation("ProductUpdatedBy")
  projects                Project[]                     @relation("ProjectOwner")
  assignedProjectRequests ProjectRequest[]              @relation("AssignedEngineer")
  completedNextSteps      ProjectRequestNextStep[]      @relation("NextStepCompletedBy")
  projectRequestNotes     ProjectRequestNote[]          @relation("ProjectRequestNotes")
  projectRequestHistory   ProjectRequestStatusHistory[] @relation("ProjectRequestHistory")
  quotesApproved          Quote[]                       @relation("QuoteApprovedBy")
  quotes                  Quote[]                       @relation("QuoteCreatedBy")
  sessions                Session[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id            String         @id @default(cuid())
  userId        String         @unique
  name          String
  taxNumber     String         @unique
  type          CompanyType
  address       String?
  city          String?
  district      String?
  phone         String?
  website       String?
  logo          String?
  description   String?
  rating        Float          @default(0)
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  certificates  Certificate[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  departments   Department[]   @relation("CompanyDepartments")
  employees     Employee[]     @relation("CompanyEmployees")
  installations Installation[]
  packages      Package[]
  partner       Partner?
  products      Product[]
  projects      Project[]      @relation("CompanyProjects")
  quotes        Quote[]        @relation("CompanyQuotes")
  reviews       Review[]
}

model Customer {
  id              String           @id @default(cuid())
  userId          String           @unique
  type            CustomerType
  firstName       String?
  lastName        String?
  companyName     String?
  taxNumber       String?
  identityNumber  String?
  address         String?
  city            String?
  district        String?
  phone           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads           Lead[]
  partnerReviews  PartnerReview[]
  photoRequests   PhotoRequest[]
  projects        Project[]        @relation("CustomerProjects")
  projectRequests ProjectRequest[]
  quotes          Quote[]          @relation("CustomerQuotes")
  quoteRequests   QuoteRequest[]
}

model Project {
  id              String           @id @default(cuid())
  name            String
  type            ProjectType
  status          ProjectStatus    @default(DRAFT)
  ownerId         String
  customerId      String?
  companyId       String?
  locationId      String?          @unique
  capacity        Float
  estimatedCost   Float?
  actualCost      Float?
  startDate       DateTime?
  completionDate  DateTime?
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  agriSolar       AgriSolar?
  commissions     Commission[]
  documents       Document[]
  financial       Financial?
  installations   Installation[]
  monitoring      Monitoring[]
  panels          PanelPlacement[]
  photoRequests   PhotoRequest[]
  company         Company?         @relation("CompanyProjects", fields: [companyId], references: [id])
  customer        Customer?        @relation("CustomerProjects", fields: [customerId], references: [id])
  location        Location?        @relation(fields: [locationId], references: [id])
  owner           User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  projectRequests ProjectRequest[] @relation("ProjectRequests")
  quotes          Quote[]
}

model ProjectRequest {
  id                 String                        @id @default(cuid())
  customerId         String?
  assignedEngineerId String?
  title              String?
  customerName       String
  customerEmail      String
  customerPhone      String?
  location           String?
  address            String?
  projectType        ProjectType
  estimatedCapacity  Float?
  estimatedBudget    Float?
  estimatedRevenue   Float?
  description        String?
  status             ProjectRequestStatus          @default(OPEN)
  priority           Priority                      @default(MEDIUM)
  source             RequestSource                 @default(WEBSITE)
  hasPhotos          Boolean                       @default(false)
  scheduledVisitDate DateTime?
  tags               Json?
  notes              Json?
  contactPreference  String?
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  projectId          String?
  assignedEngineer   User?                         @relation("AssignedEngineer", fields: [assignedEngineerId], references: [id])
  customer           Customer?                     @relation(fields: [customerId], references: [id])
  project            Project?                      @relation("ProjectRequests", fields: [projectId], references: [id])
  nextSteps          ProjectRequestNextStep[]
  requestNotes       ProjectRequestNote[]
  statusHistory      ProjectRequestStatusHistory[]

  @@index([status])
  @@index([customerId])
  @@index([assignedEngineerId])
  @@index([createdAt])
}

model ProjectRequestStatusHistory {
  id               String                @id @default(cuid())
  projectRequestId String
  status           ProjectRequestStatus
  previousStatus   ProjectRequestStatus?
  userId           String?
  userName         String
  note             String?
  timestamp        DateTime              @default(now())
  projectRequest   ProjectRequest        @relation(fields: [projectRequestId], references: [id], onDelete: Cascade)
  user             User?                 @relation("ProjectRequestHistory", fields: [userId], references: [id])

  @@index([projectRequestId])
  @@index([timestamp])
}

model ProjectRequestNote {
  id               String         @id @default(cuid())
  projectRequestId String
  content          String
  tags             Json?
  priority         Priority?      @default(MEDIUM)
  isPrivate        Boolean        @default(false)
  isEdited         Boolean        @default(false)
  createdBy        String
  createdByName    String
  createdByRole    String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation("ProjectRequestNotes", fields: [createdBy], references: [id])
  projectRequest   ProjectRequest @relation(fields: [projectRequestId], references: [id], onDelete: Cascade)

  @@index([projectRequestId])
  @@index([createdBy])
  @@index([createdAt])
  @@index([priority])
}

model ProjectRequestNextStep {
  id               String         @id @default(cuid())
  projectRequestId String
  stepType         NextStepType
  title            String
  description      String?
  dueDate          DateTime
  isOverdue        Boolean        @default(false)
  isCompleted      Boolean        @default(false)
  completedAt      DateTime?
  completedBy      String?
  priority         Priority       @default(MEDIUM)
  automationRule   String?
  metadata         Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  completedByUser  User?          @relation("NextStepCompletedBy", fields: [completedBy], references: [id])
  projectRequest   ProjectRequest @relation(fields: [projectRequestId], references: [id], onDelete: Cascade)

  @@index([projectRequestId])
  @@index([dueDate])
  @@index([isOverdue])
  @@index([isCompleted])
  @@index([stepType])
}

model NextStepAutomationRule {
  id                    String               @id @default(cuid())
  name                  String
  description           String?
  triggerStatus         ProjectRequestStatus
  stepType              NextStepType
  stepTitle             String
  stepDescription       String?
  daysAfterStatusChange Int
  priority              Priority             @default(MEDIUM)
  isActive              Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@index([triggerStatus])
  @@index([isActive])
}

model Location {
  id             String        @id @default(cuid())
  latitude       Float
  longitude      Float
  altitude       Float?
  address        String?
  city           String?
  district       String?
  postalCode     String?
  roofArea       Float?
  landArea       Float?
  roofType       String?
  roofAngle      Float?
  orientation    Float?
  shading        Json?
  boundaryPoints Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  project        Project?
  weatherData    WeatherData[]
}

model PanelPlacement {
  id        String   @id @default(cuid())
  projectId String
  panelId   String
  x         Float
  y         Float
  z         Float
  tilt      Float
  azimuth   Float
  row       Int?
  column    Int?
  createdAt DateTime @default(now())
  panel     Product  @relation(fields: [panelId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  icon      String    @default("Package")
  color     String    @default("blue")
  order     Int       @default(0)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductCategory")

  @@index([slug])
  @@index([isActive])
}

model Product {
  id              String           @id @default(cuid())
  companyId       String?
  type            ProductType
  brand           String
  model           String
  name            String
  description     String?
  specifications  Json
  price           Float
  currency        String           @default("TRY")
  unitType        String
  power           Float?
  efficiency      Float?
  warranty        Int?
  stock           Int              @default(0)
  isAvailable     Boolean          @default(true)
  images          String
  datasheet       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     String?
  updatedById     String?
  categoryId      String?
  purchaseDate    DateTime?
  purchasePrice   Float?
  editDate        DateTime?
  manual          String?
  packageItems    PackageItem[]
  panelPlacements PanelPlacement[]
  category        Category?        @relation("ProductCategory", fields: [categoryId], references: [id])
  company         Company?         @relation(fields: [companyId], references: [id])
  createdBy       User?            @relation("ProductCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?            @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  quoteItems      QuoteItem[]
}

model Package {
  id               String        @id @default(cuid())
  companyId        String?
  name             String
  type             PackageType
  description      String?
  totalPrice       Float
  totalPower       Float?
  estimatedSavings Float?
  images           String?
  isActive         Boolean       @default(true)
  isFeatured       Boolean       @default(false)
  createdById      String?
  updatedById      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  parentId         String?
  company          Company?      @relation(fields: [companyId], references: [id])
  createdBy        User?         @relation("PackageCreatedBy", fields: [createdById], references: [id])
  parent           Package?      @relation("PackageHierarchy", fields: [parentId], references: [id])
  children         Package[]     @relation("PackageHierarchy")
  updatedBy        User?         @relation("PackageUpdatedBy", fields: [updatedById], references: [id])
  items            PackageItem[]
  quoteItems       QuoteItem[]   @relation("PackageQuoteItems")

  @@index([type])
  @@index([isActive])
  @@index([companyId])
  @@index([parentId])
}

model PackageItem {
  id          String   @id @default(cuid())
  packageId   String
  productId   String
  quantity    Float
  unitPrice   Float
  total       Float
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([packageId, productId])
  @@index([packageId])
  @@index([productId])
}

model Quote {
  id               String           @id @default(cuid())
  projectId        String
  customerId       String?
  companyId        String?
  createdById      String
  quoteNumber      String           @unique
  status           QuoteStatus      @default(DRAFT)
  subtotal         Float
  tax              Float
  discount         Float            @default(0)
  total            Float
  validUntil       DateTime
  terms            String?
  notes            String?
  pdfUrl           String?
  sentAt           DateTime?
  viewedAt         DateTime?
  respondedAt      DateTime?
  approvedAt       DateTime?
  rejectedAt       DateTime?
  expiredAt        DateTime?
  deliveryChannel  DeliveryChannel?
  deliveryEmail    String?
  deliveryPhone    String?
  deliveryToken    String?          @unique
  deliveryTracking Json?
  customerIP       String?
  customerAgent    String?
  signatureData    String?
  customerComments String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  approvedById     String?
  approvedBy       User?            @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  company          Company?         @relation("CompanyQuotes", fields: [companyId], references: [id])
  createdBy        User             @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  customer         Customer?        @relation("CustomerQuotes", fields: [customerId], references: [id])
  project          Project          @relation(fields: [projectId], references: [id])
  items            QuoteItem[]
}

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  productId   String?
  description String?
  quantity    Float
  unitPrice   Float
  total       Float
  isPackage   Boolean  @default(false)
  packageId   String?
  package     Package? @relation("PackageQuoteItems", fields: [packageId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model Installation {
  id             String              @id @default(cuid())
  projectId      String
  companyId      String
  status         InstallationStatus  @default(SCHEDULED)
  scheduledDate  DateTime
  startDate      DateTime?
  completionDate DateTime?
  teamLeader     String?
  teamSize       Int?
  notes          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  checkpoints    InstallCheckpoint[]
  photos         InstallPhoto[]
  company        Company             @relation(fields: [companyId], references: [id])
  project        Project             @relation(fields: [projectId], references: [id])
}

model InstallCheckpoint {
  id             String       @id @default(cuid())
  installationId String
  name           String
  description    String?
  completed      Boolean      @default(false)
  completedAt    DateTime?
  completedBy    String?
  order          Int
  installation   Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
}

model InstallPhoto {
  id             String       @id @default(cuid())
  installationId String
  url            String
  caption        String?
  takenAt        DateTime     @default(now())
  installation   Installation @relation(fields: [installationId], references: [id], onDelete: Cascade)
}

model Financial {
  id               String     @id @default(cuid())
  projectId        String     @unique
  systemCost       Float
  installationCost Float
  maintenanceCost  Float
  annualProduction Float
  degradationRate  Float      @default(0.7)
  electricityRate  Float
  annualSaving     Float
  co2Reduction     Float
  paybackPeriod    Float
  roi25Year        Float
  irr              Float
  npv              Float
  loanAmount       Float?
  loanRate         Float?
  loanTerm         Int?
  monthlyPayment   Float?
  feedInTariff     Float?
  taxReduction     Float?
  subsidyAmount    Float?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  cashFlows        CashFlow[]
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model CashFlow {
  id          String    @id @default(cuid())
  financialId String
  year        Int
  production  Float
  revenue     Float
  opex        Float
  cashFlow    Float
  cumulative  Float
  financial   Financial @relation(fields: [financialId], references: [id], onDelete: Cascade)

  @@unique([financialId, year])
}

model Farmer {
  id                 String      @id @default(cuid())
  userId             String      @unique
  farmSize           Float
  irrigationType     String?
  mainCrops          String
  livestockCount     Int?
  monthlyConsumption Float?
  irrigationPumps    Int?
  coldStorage        Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  agriSolars         AgriSolar[]
  farms              Farm[]
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Farm {
  id          String   @id @default(cuid())
  farmerId    String
  name        String
  location    String
  size        Float
  soilType    String?
  waterSource String?
  coordinates Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  crops       Crop[]
  farmer      Farmer   @relation(fields: [farmerId], references: [id], onDelete: Cascade)
}

model Crop {
  id                String    @id @default(cuid())
  farmId            String
  name              String
  type              String
  plantingDate      DateTime
  harvestDate       DateTime?
  area              Float
  expectedYield     Float?
  actualYield       Float?
  shadeToleranceMin Float?
  shadeToleranceMax Float?
  waterNeed         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  farm              Farm      @relation(fields: [farmId], references: [id], onDelete: Cascade)
}

model AgriSolar {
  id              String   @id @default(cuid())
  projectId       String   @unique
  farmerId        String
  systemType      String
  mountHeight     Float
  rowSpacing      Float
  transparency    Float?
  shadingRatio    Float
  cropYieldImpact Float?
  waterSaving     Float?
  dualIncome      Boolean  @default(true)
  cropProtection  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Region {
  id               String        @id @default(cuid())
  name             String
  code             String        @unique
  city             String
  district         String?
  annualSunHours   Float
  solarIrradiance  Float
  electricityRate  Float
  agriculturalZone Boolean       @default(false)
  industrialZone   Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  incentives       Incentive[]
  weatherData      WeatherData[]
}

model Incentive {
  id           String    @id @default(cuid())
  regionId     String?
  name         String
  type         String
  description  String
  amount       Float?
  validFrom    DateTime
  validUntil   DateTime?
  requirements String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  region       Region?   @relation(fields: [regionId], references: [id])
}

model Regulation {
  id            String    @id @default(cuid())
  title         String
  code          String    @unique
  category      String
  description   String
  effectiveDate DateTime
  expiryDate    DateTime?
  documentUrl   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Monitoring {
  id           String   @id @default(cuid())
  projectId    String
  timestamp    DateTime @default(now())
  power        Float
  energy       Float
  voltage      Float
  current      Float
  frequency    Float
  irradiance   Float?
  temperature  Float?
  windSpeed    Float?
  pr           Float?
  availability Float?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, timestamp])
}

model WeatherData {
  id            String    @id @default(cuid())
  locationId    String?
  regionId      String?
  date          DateTime
  temperature   Float
  humidity      Float
  pressure      Float
  windSpeed     Float
  windDirection Float
  cloudCover    Float
  precipitation Float
  irradiance    Float
  location      Location? @relation(fields: [locationId], references: [id])
  region        Region?   @relation(fields: [regionId], references: [id])

  @@index([date])
  @@index([locationId, date])
}

model Lead {
  id              String       @id @default(cuid())
  customerId      String?
  name            String
  email           String
  phone           String?
  source          String?
  status          LeadStatus   @default(NEW)
  score           Int          @default(0)
  projectType     ProjectType?
  estimatedBudget Float?
  timeframe       String?
  notes           String?
  assignedTo      String?
  convertedAt     DateTime?
  lostReason      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  activities      Activity[]
  customer        Customer?    @relation(fields: [customerId], references: [id])
}

model Activity {
  id          String       @id @default(cuid())
  userId      String
  leadId      String?
  type        ActivityType
  subject     String
  description String?
  date        DateTime
  duration    Int?
  outcome     String?
  nextAction  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lead        Lead?        @relation(fields: [leadId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Document {
  id          String       @id @default(cuid())
  projectId   String?
  type        DocumentType
  name        String
  description String?
  url         String
  mimeType    String
  size        Int
  uploadedBy  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  project     Project?     @relation(fields: [projectId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(cuid())
  companyId   String
  authorName  String
  authorEmail String?
  rating      Int
  comment     String?
  verified    Boolean  @default(false)
  helpful     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
}

model Certificate {
  id          String    @id @default(cuid())
  companyId   String
  type        String
  name        String
  issuedBy    String
  issuedDate  DateTime
  expiryDate  DateTime?
  documentUrl String?
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
}

model PhotoRequest {
  id            String             @id @default(cuid())
  token         String             @unique
  customerId    String?
  projectId     String?
  requestedById String
  engineerName  String
  engineerTitle String             @default("Mühendis")
  customerName  String
  customerEmail String?
  customerPhone String?
  message       String?
  guidelines    String?
  status        PhotoRequestStatus @default(PENDING)
  expiresAt     DateTime
  uploadedAt    DateTime?
  reviewedAt    DateTime?
  reviewedById  String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  customer      Customer?          @relation(fields: [customerId], references: [id])
  project       Project?           @relation(fields: [projectId], references: [id])
  requestedBy   User               @relation("PhotoRequestCreator", fields: [requestedById], references: [id])
  reviewedBy    User?              @relation("PhotoRequestReviewer", fields: [reviewedById], references: [id])
  photos        PhotoUpload[]
}

model PhotoUpload {
  id              String       @id @default(cuid())
  photoRequestId  String
  filename        String
  originalName    String
  mimeType        String
  fileSize        Int
  storageUrl      String
  thumbnailUrl    String?
  metadata        Json?
  notes           String?
  approved        Boolean?
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  photoRequest    PhotoRequest @relation(fields: [photoRequestId], references: [id], onDelete: Cascade)
}

model ManualExchangeRate {
  id          String   @id @default(cuid())
  currency    String
  rate        Float
  description String?
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id])

  @@unique([currency, isActive])
  @@index([currency])
}

model Partner {
  id                  String                @id @default(cuid())
  companyId           String                @unique
  type                PartnerType
  status              PartnerStatus         @default(PENDING_VERIFICATION)
  serviceAreas        Json
  specialties         Json
  minimumProjectSize  Float?
  maximumProjectSize  Float?
  responseTimeHours   Int                   @default(24)
  portfolioImages     Json
  certifications      Json
  description         String?
  preferredContact    String                @default("EMAIL")
  totalLeads          Int                   @default(0)
  convertedLeads      Int                   @default(0)
  averageResponseTime Float?
  customerRating      Float                 @default(0)
  totalRevenue        Float                 @default(0)
  totalProjects       Int                   @default(0)
  commissionRate      Float                 @default(0.05)
  tier                String                @default("BASIC")
  verifiedAt          DateTime?
  verifiedBy          String?
  verificationNotes   String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  commissions         Commission[]
  company             Company               @relation(fields: [companyId], references: [id])
  quoteRequests       PartnerQuoteRequest[]
  partnerReviews      PartnerReview[]

  @@index([status])
  @@index([type])
}

model QuoteRequest {
  id                   String                @id @default(cuid())
  customerId           String?
  customerName         String
  customerEmail        String
  customerPhone        String?
  projectType          ProjectType
  location             String
  address              String?
  estimatedCapacity    Float?
  budget               Float?
  description          String?
  urgency              String                @default("NORMAL")
  status               QuoteRequestStatus    @default(OPEN)
  preferredPartnerType PartnerType?
  maxPartnersToContact Int                   @default(5)
  expectedStartDate    DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime
  partnerRequests      PartnerQuoteRequest[]
  customer             Customer?             @relation(fields: [customerId], references: [id])

  @@index([status])
  @@index([location])
  @@index([projectType])
}

model PartnerQuoteRequest {
  id                   String                    @id @default(cuid())
  partnerId            String
  quoteRequestId       String
  status               PartnerQuoteRequestStatus @default(SENT)
  sentAt               DateTime                  @default(now())
  respondedAt          DateTime?
  viewedAt             DateTime?
  declinedAt           DateTime?
  selectedAt           DateTime?
  quotedPrice          Float?
  currency             String                    @default("TRY")
  timeline             String?
  notes                String?
  attachments          Json?
  validUntil           DateTime?
  installationIncluded Boolean                   @default(true)
  warrantyYears        Int?
  maintenanceIncluded  Boolean                   @default(false)
  financingAvailable   Boolean                   @default(false)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  partner              Partner                   @relation(fields: [partnerId], references: [id])
  quoteRequest         QuoteRequest              @relation(fields: [quoteRequestId], references: [id])

  @@unique([partnerId, quoteRequestId])
  @@index([status])
  @@index([partnerId])
}

model Commission {
  id             String           @id @default(cuid())
  partnerId      String
  projectId      String?
  quoteRequestId String?
  amount         Float
  currency       String           @default("TRY")
  rate           Float
  projectValue   Float
  status         CommissionStatus @default(PENDING)
  dueDate        DateTime
  paidAt         DateTime?
  invoiceUrl     String?
  paymentMethod  String?
  description    String?
  notes          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  partner        Partner          @relation(fields: [partnerId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])

  @@index([status])
  @@index([partnerId])
  @@index([dueDate])
}

model PartnerReview {
  id                  String       @id @default(cuid())
  partnerId           String
  customerId          String?
  customerName        String
  customerEmail       String?
  rating              Int
  review              String?
  projectType         ProjectType?
  projectValue        Float?
  verified            Boolean      @default(false)
  helpful             Int          @default(0)
  qualityRating       Int?
  timelinessRating    Int?
  communicationRating Int?
  approved            Boolean      @default(true)
  moderatedBy         String?
  moderatedAt         DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  customer            Customer?    @relation(fields: [customerId], references: [id])
  partner             Partner      @relation(fields: [partnerId], references: [id])

  @@index([partnerId])
  @@index([rating])
}

model Design {
  id           String   @id @default(cuid())
  name         String
  description  String?
  designData   Json
  location     String?
  coordinates  Json?
  calculations Json?
  status       String   @default("ACTIVE")
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Department {
  id          String     @id @default(cuid())
  companyId   String
  name        String
  description String?
  managerId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation("CompanyDepartments", fields: [companyId], references: [id], onDelete: Cascade)
  manager     Employee?  @relation("DepartmentManager", fields: [managerId], references: [id])
  employees   Employee[] @relation("EmployeeDepartment")

  @@unique([companyId, name])
  @@index([companyId])
}

model Employee {
  id                 String             @id @default(cuid())
  companyId          String
  firstName          String
  lastName           String
  email              String             @unique
  employeeCode       String             @unique
  department         String?
  departmentId       String?
  position           String
  salary             Float?
  startDate          DateTime
  endDate            DateTime?
  isActive           Boolean            @default(true)
  profileImage       String?
  phoneNumber        String?
  address            String?
  emergencyContact   Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  managedDepartments Department[]       @relation("DepartmentManager")
  company            Company            @relation("CompanyEmployees", fields: [companyId], references: [id], onDelete: Cascade)
  employeeDepartment Department?        @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  documents          EmployeeDocument[]
  leaveRequests      LeaveRequest[]
  timeEntries        TimeEntry[]

  @@index([companyId])
  @@index([departmentId])
  @@index([isActive])
  @@index([email])
  @@index([employeeCode])
}

model TimeEntry {
  id            String          @id @default(cuid())
  employeeId    String
  date          DateTime        @db.Date
  clockIn       DateTime?
  clockOut      DateTime?
  breakDuration Int?
  totalHours    Float?
  status        TimeEntryStatus @default(OUT)
  notes         String?
  location      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  employee      Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@index([employeeId])
  @@index([date])
}

model LeaveRequest {
  id         String      @id @default(cuid())
  employeeId String
  type       LeaveType
  startDate  DateTime    @db.Date
  endDate    DateTime    @db.Date
  totalDays  Float
  reason     String?
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  rejectedAt DateTime?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model EmployeeDocument {
  id           String          @id @default(cuid())
  employeeId   String
  title        String
  documentType DocumentType_HR
  fileUrl      String
  uploadDate   DateTime        @default(now())
  expiryDate   DateTime?
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  employee     Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([documentType])
  @@index([expiryDate])
}

model CookieConsent {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String?
  consent   Json
  ipAddress String?
  userAgent String?
  version   String   @default("1.0.0")
  timestamp DateTime @default(now())
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation("UserCookieConsent", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
  @@index([expiresAt])
}

model KVKKApplication {
  id              String            @id @default(cuid())
  applicationNo   String            @unique
  applicantType   ApplicationType   @default(INDIVIDUAL)
  firstName       String?
  lastName        String?
  email           String
  phone           String?
  idNumber        String?
  applicantName   String?
  applicantTcNo   String?
  applicantEmail  String?
  applicantPhone  String?
  applicantAddress String?
  applicantCity   String?
  applicantDistrict String?
  applicantPostalCode String?
  requestType     KVKKRequestType
  description     String?
  requestDetails  String?
  attachments     Json?
  previousApplication Boolean @default(false)
  previousApplicationNo String?
  status          ApplicationStatus @default(PENDING)
  submittedAt     DateTime          @default(now())
  responseDeadline DateTime?
  processedAt     DateTime?
  responseText    String?
  responseFiles   Json?
  responseDetails String?
  assignedTo      String?
  processedBy     String?
  processingNotes String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  processor       User?             @relation("KVKKApplicationProcessor", fields: [processedBy], references: [id])

  @@index([applicationNo])
  @@index([email])
  @@index([status])
  @@index([requestType])
  @@index([submittedAt])
}

model KVKKAuditLog {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String?
  applicationId String?
  action        String
  details       Json
  performedBy   String?
  ipAddress     String?
  userAgent     String?
  performedAt   DateTime @default(now())
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User?    @relation("UserKVKKAudit", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([applicationId])
  @@index([action])
  @@index([performedAt])
  @@index([timestamp])
}

enum UserRole {
  ADMIN
  COMPANY
  CUSTOMER
  FARMER
  BANK
  INSTALLATION_TEAM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum CompanyType {
  INSTALLER
  MANUFACTURER
  CONSULTANT
  BANK
}

enum CustomerType {
  INDIVIDUAL
  CORPORATE
  FARMER
}

enum ProjectType {
  ROOFTOP
  LAND
  AGRISOLAR
  INDUSTRIAL
  CARPARK
  RESIDENTIAL
  COMMERCIAL
  AGRICULTURAL
}

enum ProjectStatus {
  DRAFT
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectRequestStatus {
  OPEN
  CONTACTED
  ASSIGNED
  SITE_VISIT
  CONVERTED_TO_PROJECT
  LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum RequestSource {
  WEBSITE
  PHONE
  EMAIL
  REFERRAL
  SOCIAL_MEDIA
  WALK_IN
  PARTNER_REFERRAL
  WHATSAPP
  OTHER
}

enum NextStepType {
  CONTACT_CUSTOMER
  SCHEDULE_SITE_VISIT
  SEND_QUOTE
  FOLLOW_UP_QUOTE
  PROJECT_KICKOFF
  FOLLOW_UP_GENERAL
  CUSTOM
}

enum ProductType {
  SOLAR_PANEL
  INVERTER
  BATTERY
  MOUNTING_SYSTEM
  CABLE
  MONITORING
  ACCESSORY
}

enum PackageType {
  ON_GRID
  OFF_GRID
  TARIMSAL_SULAMA
  DC_POMPALAR
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  APPROVED
  REJECTED
  EXPIRED
}

enum DeliveryChannel {
  EMAIL
  WHATSAPP
  SMS
  MANUAL
}

enum InstallationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  SITE_VISIT
  PROPOSAL_SENT
  CONTRACT_SIGNED
  NOTE
}

enum DocumentType {
  CONTRACT
  INVOICE
  REPORT
  PERMIT
  CERTIFICATE
  DATASHEET
  PHOTO
  OTHER
}

enum NotificationType {
  QUOTE_RECEIVED
  QUOTE_ACCEPTED
  PROJECT_UPDATE
  PAYMENT_DUE
  INSTALLATION_SCHEDULED
  MAINTENANCE_REMINDER
  SYSTEM_ALERT
}

enum PhotoRequestStatus {
  PENDING
  UPLOADED
  REVIEWED
  EXPIRED
}

enum PartnerType {
  INSTALLATION_COMPANY
  MANUFACTURER
  CONSULTANT
  FINANCIAL_PARTNER
}

enum PartnerStatus {
  PENDING_VERIFICATION
  VERIFIED
  SUSPENDED
  REJECTED
}

enum QuoteRequestStatus {
  OPEN
  PARTNER_RESPONSES_RECEIVED
  CUSTOMER_REVIEWING
  PARTNER_SELECTED
  PROJECT_STARTED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum PartnerQuoteRequestStatus {
  SENT
  VIEWED
  RESPONDED
  DECLINED
  EXPIRED
  SELECTED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  DISPUTED
  CANCELLED
}

enum TimeEntryStatus {
  IN
  OUT
  BREAK
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  MATERNITY
  PATERNITY
  BEREAVEMENT
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType_HR {
  CONTRACT
  ID_COPY
  DIPLOMA
  CERTIFICATE
  PERFORMANCE_REVIEW
  MEDICAL_REPORT
  RESIGNATION
  OTHER_HR
}

enum ApplicationType {
  INDIVIDUAL
  CORPORATE
}

enum KVKKRequestType {
  DATA_ACCESS
  DATA_CORRECTION
  DATA_DELETION
  DATA_OBJECTION
  DATA_PORTABILITY
  OTHER
}

enum ApplicationStatus {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  REJECTED
  CANCELLED
  EXPIRED
}
